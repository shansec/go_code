// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0
// source: middleware.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Middleware_BindHello_FullMethodName = "/pb.Middleware/BindHello"
)

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	//	rpc SayHello(HelloRequest) returns(HelloResponse) {}
	//
	// 双向流式数据
	BindHello(ctx context.Context, opts ...grpc.CallOption) (Middleware_BindHelloClient, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) BindHello(ctx context.Context, opts ...grpc.CallOption) (Middleware_BindHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &Middleware_ServiceDesc.Streams[0], Middleware_BindHello_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &middlewareBindHelloClient{stream}
	return x, nil
}

type Middleware_BindHelloClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type middlewareBindHelloClient struct {
	grpc.ClientStream
}

func (x *middlewareBindHelloClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *middlewareBindHelloClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	//	rpc SayHello(HelloRequest) returns(HelloResponse) {}
	//
	// 双向流式数据
	BindHello(Middleware_BindHelloServer) error
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) BindHello(Middleware_BindHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method BindHello not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_BindHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MiddlewareServer).BindHello(&middlewareBindHelloServer{stream})
}

type Middleware_BindHelloServer interface {
	Send(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type middlewareBindHelloServer struct {
	grpc.ServerStream
}

func (x *middlewareBindHelloServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *middlewareBindHelloServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BindHello",
			Handler:       _Middleware_BindHello_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "middleware.proto",
}
